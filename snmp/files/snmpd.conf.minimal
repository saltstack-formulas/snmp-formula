{% from "snmp/conf.jinja" import conf with context -%}
{% from "snmp/map.jinja" import snmp with context -%}
{% from "snmp/macros.jinja" import v12c_communities,v3_createUser_string with context -%}

# {{ salt['pillar.get']('SALT_MANAGED','This file is managed by salt. Do not edit') }}
#
# DO NOT EDIT
#
# This file is managed by Salt via {{ source }}
# Modify the config that generates this file instead
#
#
# snmpd.conf:
#   An configuration file for net-snmp snmpd agent.
#

##############################################################################
# System contact information
#
sysLocation {{ conf.get('sysLocation', 'Unknown (add saltstack pillar)') }}
sysContact {{ conf.get('sysContact', 'Root <root@localhost> (add saltstack pillar)') }}

dontLogTCPWrappersConnects {{ 'no' if 'dontLogTCPWrappersConnects' in conf and not conf.get('dontLogTCPWrappersConnects')|to_bool else 'yes' }}

###############################################################################
# Access Control
###############################################################################

####
# First, map the community name "public" into a "security name"

#       sec.name  source          community
{%- for entry in conf.get('com2sec', '') %}
com2sec {{ entry.name }} {{ entry.source }} {{ entry.community }}
{%- endfor %}

####
# Second, map the security name into a group name:

#       groupName      securityModel securityName
{%- for entry in conf.get('groups', '') %}
group {{ entry.name }} {{ entry.version }} {{ entry.secname }}
{% endfor %}

####
# Third, create a view for us to let the group and/or a v3 user have rights to:

# Make at least  snmpwalk -v 1 localhost -c public system fast again.
#       name           incl/excl     subtree         mask(optional)
{%- for entry in conf.get('views', []) %}
view {{ entry.name }} {{ entry.type }} {{ entry.oid }} {{ entry.mask if 'mask' in entry else '' }}
{%- endfor %}

####
# Finally, grant the group read-only access to the systemview view.

#       group          context sec.model sec.level prefix read   write  notif
{%- for entry in conf.get('access', []) %}
access {{ entry.name }} {{ entry.context or '""' }} {{ entry.match }} {{ entry.level }} {{ entry.prefix }} {{ entry.read or 'none' }} {{ entry.write or 'none' }} {{ entry.notify or 'none' }}
{%- endfor %}

# Version 1/2c users (read only)
{{ v12c_communities('ro') }}
# Version 1/2c users (read/write)
{{ v12c_communities('rw') }}

# Version 3 users (read only)
{%- for user in conf.get('rousers', []) %}
rouser {{ user.username }} {% if user.get('view') %}{{ user.get('securitylevel', 'auth') }} -V {{ user.view }}{% endif %}
{% if 'persistentconfig' in snmp  %}# createUser string will be added to {{ snmp.persistentconfig }}{% else %}{{ v3_createUser_string(user) }}{% endif %}
{%- endfor %}

# Version 3 users (read/write)
{%- for user in conf.get('rwusers', []) %}
rwuser {{ user.username }} {% if user.get('view') %}{{ user.get('securitylevel', 'auth') }} -V {{ user.view }}{% endif %}
{% if 'persistentconfig' in snmp %}# createUser string will be added to {{ snmp.persistentconfig }}{% else %}{{ v3_createUser_string(user) }}{% endif %}
{%- endfor %}

# Extra settings
{% for declaration, values in config.items() %}
{%- if values | is_iter %}
    {%- for value in values %}
{{declaration}} {{value}}
    {%- endfor %}
{%- else %}
{{declaration}} {{values}}
{%- endif %}
{%- endfor %}

# NET-SNMP-EXTEND-MIB
{%- for entry in conf.get('extend', []) %}
extend {{ entry.name }} {{ entry.prog }}
{%- endfor %}

# UCD-DLMOD-MIB
{%- for entry in conf.get('dlmod', []) %}
dlmod {{ entry.name }} {{ entry.sharedobject }}
{%- endfor %}
